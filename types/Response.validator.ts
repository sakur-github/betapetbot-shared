/* tslint:disable */
// generated by typescript-json-validator
import { inspect } from "util";
import Ajv from "ajv";
import Response from "./Response";
export const ajv = new Ajv({
  allErrors: true,
  coerceTypes: false,
  format: "fast",
  nullable: true,
  unicode: true,
  uniqueItems: true,
  useDefaults: true,
});

ajv.addMetaSchema(require("ajv/lib/refs/json-schema-draft-06.json"));

export const ResponseSchema = {
  $schema: "http://json-schema.org/draft-07/schema#",
  defaultProperties: [],
  properties: {
    games: {
      items: {
        defaultProperties: [],
        properties: {
          board: {
            defaultProperties: [],
            properties: {
              opponentState: {
                defaultProperties: [],
                properties: {
                  hand: {
                    items: {
                      defaultProperties: [],
                      properties: {
                        scoreValue: {
                          type: "number",
                        },
                        stringValue: {
                          type: "string",
                        },
                      },
                      required: ["scoreValue", "stringValue"],
                      type: "object",
                    },
                    type: "array",
                  },
                  handCount: {
                    type: "number",
                  },
                  score: {
                    type: "number",
                  },
                  userId: {
                    type: "number",
                  },
                },
                required: ["handCount", "score", "userId"],
                type: "object",
              },
              playerState: {
                defaultProperties: [],
                properties: {
                  hand: {
                    items: {
                      defaultProperties: [],
                      properties: {
                        scoreValue: {
                          type: "number",
                        },
                        stringValue: {
                          type: "string",
                        },
                      },
                      required: ["scoreValue", "stringValue"],
                      type: "object",
                    },
                    type: "array",
                  },
                  handCount: {
                    type: "number",
                  },
                  score: {
                    type: "number",
                  },
                  userId: {
                    type: "number",
                  },
                },
                required: ["handCount", "score", "userId"],
                type: "object",
              },
              squares: {
                items: {
                  items: {
                    defaultProperties: [],
                    properties: {
                      letter: {
                        defaultProperties: [],
                        properties: {
                          scoreValue: {
                            type: "number",
                          },
                          stringValue: {
                            type: "string",
                          },
                        },
                        required: ["scoreValue", "stringValue"],
                        type: "object",
                      },
                      multiplier: {
                        type: "number",
                      },
                      multiplyWord: {
                        type: "boolean",
                      },
                      type: {
                        type: "number",
                      },
                      x: {
                        type: "number",
                      },
                      y: {
                        type: "number",
                      },
                    },
                    required: ["multiplier", "multiplyWord", "type", "x", "y"],
                    type: "object",
                  },
                  type: "array",
                },
                type: "array",
              },
            },
            required: ["opponentState", "playerState", "squares"],
            type: "object",
          },
          opponent: {
            defaultProperties: [],
            properties: {
              age: {
                type: "number",
              },
              bingos: {
                type: "number",
              },
              drawn: {
                type: "number",
              },
              droped: {
                type: "number",
              },
              games: {
                type: "number",
              },
              gender: {
                type: "number",
              },
              handle: {
                type: "string",
              },
              id: {
                type: "number",
              },
              location: {
                type: "number",
              },
              location_text: {
                type: "string",
              },
              name_first: {
                type: "string",
              },
              name_last: {
                type: "string",
              },
              rating: {
                type: "number",
              },
              won: {
                type: "number",
              },
            },
            required: [
              "age",
              "bingos",
              "drawn",
              "droped",
              "games",
              "gender",
              "handle",
              "id",
              "location_text",
              "name_first",
              "name_last",
              "rating",
              "won",
            ],
            type: "object",
          },
          player: {
            defaultProperties: [],
            properties: {
              age: {
                type: "number",
              },
              bingos: {
                type: "number",
              },
              drawn: {
                type: "number",
              },
              droped: {
                type: "number",
              },
              games: {
                type: "number",
              },
              gender: {
                type: "number",
              },
              handle: {
                type: "string",
              },
              id: {
                type: "number",
              },
              location: {
                type: "number",
              },
              location_text: {
                type: "string",
              },
              name_first: {
                type: "string",
              },
              name_last: {
                type: "string",
              },
              rating: {
                type: "number",
              },
              won: {
                type: "number",
              },
            },
            required: [
              "age",
              "bingos",
              "drawn",
              "droped",
              "games",
              "gender",
              "handle",
              "id",
              "location_text",
              "name_first",
              "name_last",
              "rating",
              "won",
            ],
            type: "object",
          },
        },
        required: ["board", "opponent", "player"],
        type: "object",
      },
      type: "array",
    },
  },
  required: ["games"],
  type: "object",
};
export type ValidateFunction<T> = ((data: unknown) => data is T) &
  Pick<Ajv.ValidateFunction, "errors">;
export const isResponse = ajv.compile(ResponseSchema) as ValidateFunction<
  Response
>;
export default function validate(value: unknown): Response {
  if (isResponse(value)) {
    return value;
  } else {
    throw new Error(
      ajv.errorsText(
        isResponse.errors!.filter((e: any) => e.keyword !== "if"),
        { dataVar: "Response" }
      ) +
        "\n\n" +
        inspect(value)
    );
  }
}
